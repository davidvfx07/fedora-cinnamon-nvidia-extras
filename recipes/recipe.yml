# yaml-language-server: $schema=https://schema.blue-build.org/recipe-v1.json
# This recipe builds a custom immutable Fedora 42 image with the Cinnamon desktop,
# comprehensive NVIDIA/CUDA support, extensive development tools (including Miniconda),
# GDM display manager, Geeqie image viewer, extensive multimedia codecs/thumbnailers,
# virtualization tools, disk/partition management, alternative terminal/editor,
# GSConnect, and requested Flatpaks, based on Universal Blue's base-main image.

# Required: The image name. Used when publishing to GHCR as `ghcr.io/user/name`.
name: fedora-cinnamon-nvidia-extras

# Required: The image description. Published to GHCR in the image metadata.
description: Custom immutable Fedora Cinnamon image with NVIDIA/CUDA, development tools, VMs, and more.

# Required: The OCI image to base your custom image on.
# We are using the fedora-main base for Fedora 42.
base-image: ghcr.io/ublue-os/base-nvidia
image-version: 42 # latest is also supported if you want new updates ASAP

# Optional: Allows setting custom tags on the recipeâ€™s final image.
# alt-tags:
#   - latest-cinnamon
#   - f42

# Optional: The tag to pull for the bluebuild cli.
# blue-build-tag: latest

# Optional: The version of nushell to include.
# nushell-version: latest

# Optional: A list of stages that are executed before the build.
# stages: [] # Define stages here if needed

# Required: A list of modules that is executed in order.
modules:
  # Module for copying local files into the image.
  - type: files
    # Add your files here.
    # Example:
    # - src: usr/etc/just.d/00-custom.just
    #   dest: /usr/etc/just.d/00-custom.just
    files:
      - source: system
        dest: /

  # Module for managing RPM packages.
  - type: rpm-ostree
    #keys:
      # RPM Fusion Free GPG Key
      #- url: https://raw.githubusercontent.com/rpmfusion/rpmfusion-free-release/refs/heads/master/RPM-GPG-KEY-rpmfusion-free-fedora-2020

      # RPM Fusion Nonfree GPG Key
      #- url: https://raw.githubusercontent.com/rpmfusion/rpmfusion-nonfree-release/refs/heads/master/RPM-GPG-KEY-rpmfusion-nonfree-fedora-2020

      # RPM Fusion Tainted GPG Key (Include if you are using the Tainted repo)
      #- url: https://rpmfusion.org/RPM-GPG-KEY-rpmfusion-tainted-fedora-42

      # Starship COPR GPG Key (Include if you are using the Starship COPR)
      #- url: https://download.copr.fedorainfracloud.org/results/atim/starship/pubkey.gpg
    install:
      # Packages to install
      # Core Cinnamon Desktop Environment (packages from archived repo list, modified)
      - cinnamon
      - cinnamon-control-center
      - cinnamon-screensaver
      # Removed eom
      - metacity # Window manager
      - nemo # File manager
      - nemo-fileroller
      - nemo-image-converter
      - nemo-preview
      - nemo-python
      # Removed slick-greeter and slick-greeter-cinnamon
      - xed # Text editor
      # Removed xfburn
      - xreader # Document viewer
      - xdg-user-dirs-gtk # GTK utilities for user directories

      # GDM (GNOME Display Manager)
      - gdm

      # Geeqie Image Viewer (instead of eom)
      - geeqie

      # GSConnect for Android Integration
      - gsconnect

      # Virtualization Tools
      - virt-manager # Virtual Machine Manager GUI
      - qemu-kvm # QEMU and KVM
      - libvirt # Virtualization library and daemon
      - virt-install # Command line tool for installing VMs

      # Disk and Partition Management
      # gnome-disk-utility was already included implicitly by the base/Cinnamon deps, ensuring it's here.
      - gnome-disk-utility
      - gparted # Dedicated partition editor

      # Alternative Terminal and Text Editor
      - ptyxis # Second terminal emulator
      - geany # Second lightweight text editor

      # Comprehensive Multimedia Codecs and Thumbnail Generators
      # Includes packages from Fedora and RPM Fusion (free and nonfree) for broad support.
      - ffmpeg # The core FFmpeg library and tools
      - gstreamer1-plugins-base
      - gstreamer1-plugins-good # Good quality plugins
      - gstreamer1-plugins-bad # Bad quality plugins (may have some licensing issues)
      - gstreamer1-plugins-ugly # Ugly quality plugins (likely patented)
      - gstreamer1-libav # FFmpeg plugin for GStreamer
      - libavcodec-free # Free FFmpeg codec library
      - libavcodec-full # Full FFmpeg codec library (includes non-free)
      - libdvdcss # For playing encrypted DVDs (from a separate repo, often RPM Fusion tainted)
      - mesa-va-drivers # VA-API drivers for hardware video acceleration
      - mesa-vdpau-drivers # VDPAU drivers for hardware video acceleration
      - vkd3d # Direct3D 12 to Vulkan translation layer
      - intel-media-driver # Intel Media Driver for VAAPI (if you have Intel iGPU)
      - openh264 # Cisco OpenH264 codec
      # Thumbnailers
      - ffmpegthumbnailer # Thumbnailer for videos (already listed, ensuring it's there)
      - raw-thumbnailer # Thumbnailer for raw image files (often in version-specific includes)
      - tumbler # Thumbnail service for the desktop

      # Comprehensive NVIDIA/CUDA Support (required since using base-main)
      # These packages are typically from RPM Fusion nonfree and NVIDIA's CUDA repo.
      # Universal Blue bases usually have RPM Fusion configured. You might need to
      # add the official NVIDIA CUDA repository for some of these packages via scripts.
      # - akmod-nvidia # Akmod for NVIDIA kernel modules
      # - xorg-x11-drv-nvidia # NVIDIA Xorg driver (includes Wayland components)
      # - nvidia-settings # NVIDIA settings utility
      # - nvidia-xconfig # NVIDIA X configuration tool
      # Core CUDA packages - add more specific ones below if needed
      - cuda # Meta-package for CUDA toolkit
      - cuda-toolkit # The NVIDIA CUDA Toolkit base
      - libcudnn-devel # cuDNN development libraries (for deep learning)
      - tensorrt # NVIDIA TensorRT (for optimized inference)
      # Note: Comprehensive CUDA support depends on exact development needs.
      # This list provides core components. Additional libraries might be needed.
      # Enabling Wayland with proprietary NVIDIA drivers in Cinnamon might require
      # manual configuration and is considered experimental.

      # Packages for working with Apple Devices
      - usbmuxd # Daemon for communicating with Apple devices over USB
      - libimobiledevice-utils # Utilities for interacting with iOS devices
      - ifuse # Mount iOS device filesystems over USB

      - android-tools
      #- starship

      # Extensive Development Extras
      - make
      - gcc
      - git
      - cmake
      - htop # Interactive process viewer
      - nano # Simple text editor (if xed isn't preferred for quick edits)
      - gdb # GNU Debugger
      - valgrind # Memory debugging and profiling
      - strace # Trace system calls and signals
      - ltrace # Trace library calls
      - pkgconf-pkg-config # Helps configure build flags
      - zlib-devel
      - bzip2-devel
      - xz-devel
      - openssl-devel
      - elfutils-libelf-devel
      - libffi-devel
      - readline-devel
      - ncurses-devel
      - lsusb
      - lshw
      - lspci
      - usbutils
      - ddrescue
      # Add any other specific compilers, libraries, or tools you need

    # remove:
      # Packages to remove (based on the archived repo's exclusions and explicit requests)
      # - firefox # Removing the RPM version as we're adding the Flatpak
      # - firefox-langpacks # Removing langpacks for the RPM version
      # - eom # Replaced with geeqie
      # Add any other packages from the base-main image you wish to remove

  #- type: akmods
    #install:
      #- nvidia-open
      #- evdi

  # Module for running custom scripts during the build process.
  - type: script
    # Add your scripts here.
    snippets:
      - | # Install Miniconda via script.
      # Note: Installing Miniconda system-wide like this is possible, but
      # using it within a toolbox or distrobox is often the recommended approach
      # in atomic distributions for better isolation and reproducibility.
      - |
        #!/usr/bin/env bash
        set -euo pipefail

        MINICONDA_VERSION="latest" # Or a specific version like "py310_23.1.0-1"
        MINICONDA_INSTALL_DIR="/opt/miniconda3" # System-wide installation path

        # Download the Miniconda installer script
        curl -LO "https://repo.anaconda.com/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh"

        # Run the installer script in batch mode (non-interactive)
        # -b: batch mode
        # -p: installation path
        # -f: force installation if directory exists
        bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -b -p ${MINICONDA_INSTALL_DIR} -f

        # Clean up the installer script
        rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh

        # Initialize Conda for all users (optional, can also be done per-user)
        # This modifies the system's shell configuration. Be aware of potential side effects.
        # ${MINICONDA_INSTALL_DIR}/bin/conda init bash
        # ${MINICONDA_INSTALL_DIR}/bin/conda init zsh
        # Add other shells as needed

        # Update conda base environment (optional)
        # ${MINICONDA_INSTALL_DIR}/bin/conda update -n base -c defaults --all -y

  # Module for enabling/disabling systemd services.
  - type: systemd
    system:
      # Enable GDM as the display manager.
      # This might be needed depending on the base image's default.
      # If GDM starts automatically after installing the package, you might not need this.
      enabled:
        - gdm.service
        - ibvirtd.service # Enable libvirtd for virtualization

  # Module for managing kernel arguments.
  - type: kargs
    # Add your kernel arguments here.
    # Example:
    # - i915.enable_msrs=0 # Example for Intel graphics
    kargs:
      # Recommended kernel arguments for NVIDIA
      - nvidia-drm.modeset=1 # Enables NVIDIA DRM modesetting (often needed for Wayland)
      - rd.driver.blacklist=nouveau # Blacklists the open-source Nouveau driver to prevent conflicts

    # Module for managing Flatpak applications and remotes.
  - type: default-flatpaks # This is an item in the 'modules' list
    # The configuration for this module goes under a key here.
    notify: true
    system: # <--- Add this key here, aligned with 'type:'
      install:
        # Add requested Flatpak applications
        - org.videolan.VLC # <--- This list item is also indented under 'flatpaks:'
        - org.mozilla.firefox
        - org.chromium.Chromium
        - com.github.tchx84.Flatseal
        - com.usebottles.bottles
        - org.fedoraproject.MediaWriter